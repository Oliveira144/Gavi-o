import streamlit as st
import collections

# --- Configura√ß√£o da p√°gina ---
st.set_page_config(
    page_title="Analisador Fantasmas de Padr√µes Football Studio",
    page_icon="üîÆ",
    layout="wide"
)

# --- Mapas ---
EMOJI_MAP = {'V': 'üî¥', 'A': 'üîµ', 'E': 'üü°'}

# Mapeamento dos padr√µes com emojis explicativos
PADROES_INFO = {
    "Sequ√™ncia Repetitiva": {
        "numero": "1",
        "emoji": "üî¥",
        "descricao": "3 ou mais resultados iguais consecutivos dentro da janela."
    },
    "Sequ√™ncia Repetitiva ap√≥s quebra": {
        "numero": "1b",
        "emoji": "üîÑ",
        "descricao": "Sequ√™ncia retomada ap√≥s quebra dentro da janela."
    },
    "Padr√£o Alternado": {
        "numero": "2",
        "emoji": "üîµ",
        "descricao": "Resultados alternados dentro da janela (ex: üî¥üîµüî¥üîµ)."
    },
    "Quebra de Padr√£o": {
        "numero": "3",
        "emoji": "‚ö†Ô∏è",
        "descricao": "Mudan√ßa inesperada ap√≥s padr√£o repetitivo dentro da janela."
    },
    "Empates Estrat√©gicos": {
        "numero": "4",
        "emoji": "üü°",
        "descricao": "Empates ocorrendo dentro da janela; poss√≠vel confus√£o proposital."
    },
    "Sequ√™ncias Longas de Uma Cor": {
        "numero": "5",
        "emoji": "üî¥",
        "descricao": "Sequ√™ncia longa (>5) da mesma cor dentro da janela."
    },
    "Padr√£o de Dois ou Tr√™s Repetidos + Invers√£o": {
        "numero": "6",
        "emoji": "üîµ",
        "descricao": "Ciclo 2-3 repeti√ß√µes seguido de invers√£o detectado na janela."
    },
    "Padr√µes de Ciclos Curtos": {
        "numero": "7",
        "emoji": "üîÑ",
        "descricao": "Repeti√ß√£o de blocos curtos detectada dentro da janela."
    },
    "Ru√≠do Controlado / Qu√¢ntico": {
        "numero": "8",
        "emoji": "‚ùì",
        "descricao": "Janela com comportamento aparentemente aleat√≥rio/ruidoso."
    },
    "Falsos Padr√µes": {
        "numero": "9",
        "emoji": "üö´",
        "descricao": "Poucas repeti√ß√µes dentro da janela ‚Äî alto ru√≠do."
    },
    "Manipula√ß√£o por N√≠vel de Confian√ßa": {
        "numero": "10",
        "emoji": "üîí",
        "descricao": "Empates + invers√µes frequentes dentro da janela ‚Äî padr√£o sofisticado."
    }
}

# ----------------- Helpers -----------------
def oposto(cor):
    if cor == 'V': return 'A'
    if cor == 'A': return 'V'
    return None

def last_non_e_in_window(window):
    for r in reversed(window):
        if r != 'E':
            return r
    return None

# ----------------- Detec√ß√£o (apenas sobre os √∫ltimos 18 resultados) -----------------
def detectar_padrao(historico):
    """
    Analisa APENAS os √∫ltimos 18 resultados (janela) e retorna:
    (padrao_chave, meta_dict)
    meta cont√©m: confianca, window (lista), len_window, ultimo, ultimo_valido,
                 count_atual, cor_anterior, count_anterior, empates, inversoes, repeticoes_consecutivas,
                 predicted (quando aplic√°vel)
    """
    meta = {
        "confianca": 0,
        "window": [],
        "len_window": 0,
        "ultimo": None,
        "ultimo_valido": None,
        "count_atual": 0,
        "cor_anterior": None,
        "count_anterior": 0,
        "empates": 0,
        "inversoes": 0,
        "repeticoes_consecutivas": 0,
        "predicted": None,
    }

    if not historico or len(historico) == 0:
        return "Sem padr√£o suficiente", meta

    # Janela: √∫ltimos 18 resultados (ou menos, se n√£o houver 18)
    window = historico[-18:] if len(historico) >= 18 else historico[:]
    meta["window"] = window
    meta["len_window"] = len(window)

    # Contagens b√°sicas na janela
    meta["empates"] = window.count('E')
    meta["inversoes"] = sum(
        1 for i in range(len(window)-1)
        if window[i] != window[i+1] and window[i] != 'E' and window[i+1] != 'E'
    )
    meta["repeticoes_consecutivas"] = sum(1 for i in range(len(window)-1) if window[i] == window[i+1])

    ultimo = window[-1]
    meta["ultimo"] = ultimo
    meta["ultimo_valido"] = last_non_e_in_window(window)

    # count_atual: sequ√™ncia consecutiva no final da janela (apenas dentro da janela)
    count_atual = 0
    for i in range(len(window)-1, -1, -1):
        if window[i] == ultimo:
            count_atual += 1
        else:
            break
    meta["count_atual"] = count_atual

    # cor anterior e count anterior (dentro da janela)
    idx_prev = len(window) - 1 - count_atual
    cor_anterior = None
    count_anterior = 0
    if idx_prev >= 0:
        cor_anterior = window[idx_prev]
        for j in range(idx_prev, -1, -1):
            if window[j] == cor_anterior:
                count_anterior += 1
            else:
                break
    meta["cor_anterior"] = cor_anterior
    meta["count_anterior"] = count_anterior

    # --- Prioridade de padr√µes (todos avaliados *apenas* na janela) ---

    # 1) Sequ√™ncias Longas de Uma Cor (maior prioridade)
    if meta["count_atual"] >= 5 and ultimo != 'E':
        meta["confianca"] = min(95, 50 + meta["count_atual"] * 6)
        return "Sequ√™ncias Longas de Uma Cor", meta

    # 2) Manipula√ß√£o por N√≠vel de Confian√ßa (empates + invers√µes frequentes na janela)
    if meta["empates"] >= 1 and meta["inversoes"] >= 2:
        meta["confianca"] = 85
        return "Manipula√ß√£o por N√≠vel de Confian√ßa", meta

    # 3) Padr√µes de Ciclos Curtos (blocos 3|3 repetidos dentro da janela)
    for i in range(0, len(window) - 5):
        b1 = window[i:i+3]
        b2 = window[i+3:i+6]
        if b1 == b2 and 'E' not in b1:
            meta["confianca"] = 80
            meta["predicted"] = b1[0]  # pr√≥ximo esperado do ciclo
            return "Padr√µes de Ciclos Curtos", meta

    # 4) Padr√£o de Dois ou Tr√™s Repetidos + Invers√£o
    for i in range(0, len(window) - 3):
        a, b, c, d = window[i], window[i+1], window[i+2], window[i+3]
        if a == b and c != b and d == c and a != 'E' and c != 'E':
            meta["confianca"] = 75
            meta["predicted"] = c
            return "Padr√£o de Dois ou Tr√™s Repetidos + Invers√£o", meta

    # 5) Sequ√™ncia Repetitiva ap√≥s quebra (tudo avaliado dentro da janela)
    if meta["count_atual"] >= 3 and meta["cor_anterior"] and meta["cor_anterior"] != ultimo and meta["count_anterior"] >= 2 and ultimo != 'E':
        meta["confianca"] = min(85, 45 + meta["count_atual"] * 8)
        return "Sequ√™ncia Repetitiva ap√≥s quebra", meta

    # 6) Sequ√™ncia Repetitiva (3 ou mais) dentro da janela
    if meta["count_atual"] >= 3 and ultimo != 'E':
        meta["confianca"] = min(75, 40 + meta["count_atual"] * 6)
        return "Sequ√™ncia Repetitiva", meta

    # 7) Padr√£o Alternado (considera apenas n√£o-empates dentro da janela)
    non_e_window = [x for x in window if x != 'E']
    if len(non_e_window) >= 4:
        tail = non_e_window[-8:] if len(non_e_window) >= 8 else non_e_window
        alternado = True
        for i in range(len(tail)-1):
            if tail[i] == tail[i+1]:
                alternado = False
                break
        if alternado:
            meta["confianca"] = 60
            return "Padr√£o Alternado", meta

    # 8) Quebra de Padr√£o (2 iguais + invers√£o) dentro da janela
    if meta["count_atual"] == 2 and len(window) >= 3 and window[-3] != ultimo:
        meta["confianca"] = 55
        return "Quebra de Padr√£o", meta

    # 9) Empates Estrat√©gicos (qualquer empate dentro da janela)
    if meta["empates"] >= 1:
        meta["confianca"] = 50
        return "Empates Estrat√©gicos", meta

    # 10) Falsos Padr√µes (muito ru√≠do na janela)
    if meta["repeticoes_consecutivas"] <= 1:
        meta["confianca"] = 40
        return "Falsos Padr√µes", meta

    # 11) Ru√≠do Controlado / Qu√¢ntico (fallback)
    meta["confianca"] = 35
    return "Ru√≠do Controlado / Qu√¢ntico", meta

# ----------------- Sugest√£o (usa exclusivamente o meta da janela) -----------------
def sugerir_aposta(padrao_chave, meta):
    ultimo = meta.get("ultimo")
    ultimo_valido = meta.get("ultimo_valido")
    conf = meta.get("confianca", 0)
    count_atual = meta.get("count_atual", 0)

    # Cada caso usa apenas dados da janela (meta)
    if padrao_chave == "Sequ√™ncia Repetitiva ap√≥s quebra":
        if ultimo and ultimo != 'E':
            return f"Aposte em {EMOJI_MAP[ultimo]}", f"Sequ√™ncia retomada ap√≥s quebra ({count_atual}x) dentro dos √∫ltimos {meta['len_window']} resultados. Confian√ßa ‚âà {conf}%."
        if ultimo_valido:
            return f"Aposte em {EMOJI_MAP[ultimo_valido]}", f"√öltima cor v√°lida {EMOJI_MAP[ultimo_valido]} dentro da janela; aposte com cautela. Confian√ßa ‚âà {conf}%."
        return "Aguardar", "√öltimos resultados s√£o empates ‚Äî aguardar cor v√°lida dentro da janela."

    if padrao_chave == "Sequ√™ncia Repetitiva":
        if ultimo_valido:
            opp = oposto(ultimo_valido)
            if opp:
                return f"Aposte em {EMOJI_MAP[opp]}", f"Sequ√™ncia de {count_atual} detectada dentro da janela; sugerimos apostar no oposto esperando quebra ‚Äî Confian√ßa ‚âà {conf}%."
        return "Aguardar", "Sequ√™ncia identificada dentro da janela mas sem refer√™ncia v√°lida."

    if padrao_chave == "Padr√£o Alternado":
        if ultimo_valido:
            opp = oposto(ultimo_valido)
            return f"Aposte em {EMOJI_MAP[opp]}", f"Padr√£o alternado nos √∫ltimos {meta['len_window']} resultados ‚Äî apostar no oposto do √∫ltimo v√°lido. Confian√ßa ‚âà {conf}%."
        return "Sem sugest√£o clara", "Padr√£o alternado identificado na janela, mas sem refer√™ncia v√°lida."

    if padrao_chave == "Quebra de Padr√£o":
        if ultimo_valido:
            return f"Aposte em {EMOJI_MAP[ultimo_valido]}", f"Quebra de padr√£o detectada dentro da janela ‚Äî apostar na continuidade do √∫ltimo (Confian√ßa ‚âà {conf}%)."
        return "Aguardar", "Quebra detectada mas sem cor v√°lida na janela."

    if padrao_chave == "Empates Estrat√©gicos":
        if ultimo_valido:
            return f"Aposte em {EMOJI_MAP[ultimo_valido]}", f"Empates detectados na janela ‚Äî apostar na √∫ltima cor v√°lida {EMOJI_MAP[ultimo_valido]} com cautela. Confian√ßa ‚âà {conf}%."
        return "Aguardar", "Janela composta apenas por empates ‚Äî aguardar cor v√°lida."

    if padrao_chave == "Sequ√™ncias Longas de Uma Cor":
        return "Aguardar", f"Sequ√™ncia muito longa ({count_atual}x) dentro da janela ‚Äî risco alto; evitar entradas (Confian√ßa ‚âà {conf}%)."

    if padrao_chave == "Padr√£o de Dois ou Tr√™s Repetidos + Invers√£o":
        pred = meta.get("predicted")
        if pred:
            return f"Aposte em {EMOJI_MAP[pred]}", f"Padr√£o 2/3 + invers√£o detectado na janela ‚Äî sugerimos {EMOJI_MAP[pred]} (Confian√ßa ‚âà {conf}%)."
        if ultimo_valido:
            return f"Aposte em {EMOJI_MAP[ultimo_valido]}", f"Padr√£o detectado dentro da janela; usar √∫ltima cor v√°lida como refer√™ncia (Confian√ßa ‚âà {conf}%)."
        return "Aguardar", "Padr√£o detectado mas sem refer√™ncia confi√°vel na janela."

    if padrao_chave == "Padr√µes de Ciclos Curtos":
        pred = meta.get("predicted")
        if pred:
            return f"Aposte em {EMOJI_MAP[pred]}", f"Ciclo curto detectado na janela; pr√≥xima esperada: {EMOJI_MAP[pred]} (Confian√ßa ‚âà {conf}%)."
        return "Aguardar", "Ciclo curto detectado mas predi√ß√£o n√£o confi√°vel."

    if padrao_chave == "Falsos Padr√µes":
        return "Evitar aposta", f"Alto ru√≠do dentro da janela ‚Äî evitar apostas (Confian√ßa ‚âà {conf}%)."

    if padrao_chave == "Manipula√ß√£o por N√≠vel de Confian√ßa":
        return "Aposte com cautela", f"Padr√£o complexo (empates+invers√µes) na janela ‚Äî apostar valores baixos e com gest√£o (Confian√ßa ‚âà {conf}%)."

    if padrao_chave == "Ru√≠do Controlado / Qu√¢ntico":
        return "Sem sugest√£o clara", "Janela muito ruidosa/aleat√≥ria ‚Äî aguardar mais dados."

    if padrao_chave == "Sem padr√£o suficiente":
        return "Sem sugest√£o", "Hist√≥rico insuficiente para an√°lise (janela vazia)."

    # fallback
    return "Sem sugest√£o clara", "Padr√£o n√£o identific√°vel com confian√ßa suficiente."

# ----------------- UI -----------------
if 'historico' not in st.session_state:
    st.session_state.historico = collections.deque(maxlen=200)  # manter hist√≥rico maior, mas analisar s√≥ a janela de 18

st.title("üîÆ Analisador ‚Äî An√°lise com Janela de 18 Resultados (garantido)")
st.markdown("---")

st.markdown("### 1. Inserir Resultados")
st.write("Insira manualmente o resultado da rodada ou use os bot√µes:")

col1, col2, col3, col4, col5 = st.columns(5)
with col1:
    if st.button("üî¥ Vit√≥ria da Casa", use_container_width=True):
        st.session_state.historico.append('V')
with col2:
    if st.button("üîµ Vit√≥ria do Visitante", use_container_width=True):
        st.session_state.historico.append('A')
with col3:
    if st.button("üü° Empate", use_container_width=True):
        st.session_state.historico.append('E')
with col4:
    st.markdown("<br>", unsafe_allow_html=True)
    if st.button("Desfazer", help="Remove o √∫ltimo resultado", use_container_width=True):
        if st.session_state.historico:
            st.session_state.historico.pop()
with col5:
    st.markdown("<br>", unsafe_allow_html=True)
    if st.button("Limpar Hist√≥rico", help="Apaga todo o hist√≥rico", use_container_width=True):
        st.session_state.historico.clear()

st.markdown("---")

st.markdown("### 2. Hist√≥rico de Resultados (exibindo os mais recentes primeiro)")
if st.session_state.historico:
    historico_list = list(st.session_state.historico)
    hist_emojis = [EMOJI_MAP[r] for r in reversed(historico_list)]
    linhas = [hist_emojis[i:i+9] for i in range(0, len(hist_emojis), 9)]
    for linha in linhas[:10]:
        st.markdown(" ".join(linha))
else:
    st.info("Nenhum resultado registrado ainda")

st.markdown("---")

modo_debug = st.checkbox("Modo Debug ‚Äî mostrar meta da janela (√∫ltimos 18)", value=False)

# An√°lise e sugest√£o (baseada exclusivamente na janela de 18)
if st.session_state.historico:
    historico_list = list(st.session_state.historico)
    padrao_chave, meta = detectar_padrao(historico_list)
    info = PADROES_INFO.get(padrao_chave, {
        "numero": "?",
        "emoji": "‚ùî",
        "descricao": "Padr√£o n√£o identificado."
    })

    aposta, explicacao = sugerir_aposta(padrao_chave, meta)

    detalhe = ""
    if meta.get("count_atual", 0) >= 2 and meta.get("ultimo") and meta.get("ultimo") != 'E':
        detalhe = f" ({meta['count_atual']}x {EMOJI_MAP[meta['ultimo']]})"
    display_padrao = f"{padrao_chave}{detalhe}"

    st.markdown(f"**Padr√£o Detectado: {info['numero']}. {display_padrao} {info['emoji']}**")
    st.write(info["descricao"])

    conf = meta.get("confianca", 0)
    st.metric("Confian√ßa da Detec√ß√£o (janela)", f"{conf}%")
    try:
        st.progress(conf / 100.0)
    except Exception:
        st.progress(conf)

    if isinstance(aposta, str) and aposta.startswith("Aposte"):
        st.success(f"**Sugest√£o de Aposta:** {aposta}")
    elif isinstance(aposta, str) and (aposta.startswith("Evitar") or aposta.startswith("Aguardar") or aposta.startswith("Sem") or aposta.startswith("Aposte com cautela")):
        st.warning(f"**Recomenda√ß√£o:** {aposta}")
    else:
        st.info(f"**Recomenda√ß√£o:** {aposta}")

    st.info(f"**Explica√ß√£o:** {explicacao}")

    if modo_debug:
        st.markdown("---")
        st.write("**DEBUG ‚Äî metadados calculados sobre a janela (√∫ltimos 18)**")
        st.json(meta)
        st.write("Padr√£o chave:", padrao_chave)
else:
    st.info("Insira resultados para come√ßar a an√°lise")

st.markdown("---")
st.write("Analisador de padr√µes Football Studio - Use com responsabilidade")
