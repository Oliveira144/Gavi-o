import streamlit as st
import collections

# --- Configura√ß√£o da p√°gina ---
st.set_page_config(
    page_title="Analisador Fantasmas de Padr√µes Football Studio",
    page_icon="üîÆ",
    layout="wide"
)

# --- Mapas ---
EMOJI_MAP = {'V': 'üî¥', 'A': 'üîµ', 'E': 'üü°'}

# Mapeamento dos padr√µes com emojis explicativos
PADROES_INFO = {
    "Sequ√™ncia Repetitiva": {
        "numero": "1",
        "emoji": "üî¥",
        "descricao": "3 ou mais resultados iguais consecutivos, indicando poss√≠vel quebra."
    },
    "Padr√£o Alternado": {
        "numero": "2",
        "emoji": "üîµ",
        "descricao": "Resultados alternados (ex: üî¥üîµüî¥üîµ), padr√£o comum de manipula√ß√£o."
    },
    "Quebra de Padr√£o": {
        "numero": "3",
        "emoji": "‚ö†Ô∏è",
        "descricao": "Mudan√ßa inesperada ap√≥s padr√£o repetitivo, indicando manipula√ß√£o."
    },
    "Empates Estrat√©gicos": {
        "numero": "4",
        "emoji": "üü°",
        "descricao": "Empates usados como estrat√©gia para confundir leitura."
    },
    "Sequ√™ncias Longas de Uma Cor": {
        "numero": "5",
        "emoji": "üî¥",
        "descricao": "Sequ√™ncia longa (>5) da mesma cor, manipula√ß√£o evidente."
    },
    "Padr√£o de Dois ou Tr√™s Repetidos + Invers√£o": {
        "numero": "6",
        "emoji": "üîµ",
        "descricao": "Ciclo com 2-3 repeti√ß√µes seguido de invers√£o, tentando iludir."
    },
    "Padr√µes de Ciclos Curtos": {
        "numero": "7",
        "emoji": "üîÑ",
        "descricao": "Repeti√ß√£o de pequenos ciclos de resultados."
    },
    "Ru√≠do Controlado / Qu√¢ntico": {
        "numero": "8",
        "emoji": "‚ùì",
        "descricao": "Sequ√™ncia aparentemente aleat√≥ria para confundir apostas."
    },
    "Falsos Padr√µes": {
        "numero": "9",
        "emoji": "üö´",
        "descricao": "Padr√£o falso, alta altern√¢ncia aleat√≥ria para evitar leitura."
    },
    "Manipula√ß√£o por N√≠vel de Confian√ßa": {
        "numero": "10",
        "emoji": "üîí",
        "descricao": "Manipula√ß√£o sofisticada com empates e invers√µes frequentes."
    }
}

def oposto(cor):
    if cor == 'V': return 'A'
    if cor == 'A': return 'V'
    return None

# Fun√ß√£o para detectar padr√£o
def detectar_padrao(historico):
    if len(historico) < 2:
        return "Sem padr√£o suficiente"

    ultimo = historico[-1]
    penultimo = historico[-2]

    # Sequ√™ncia repetitiva (3 ou mais)
    count = 1
    for i in range(len(historico)-2, -1, -1):
        if historico[i] == ultimo:
            count += 1
        else:
            break
    if count >= 3:
        return "Sequ√™ncia Repetitiva"

    # Padr√£o alternado (ex: V A V A)
    if len(historico) >= 4:
        alternado = True
        for i in range(len(historico)-1):
            if historico[i] == historico[i+1]:
                alternado = False
                break
        if alternado:
            return "Padr√£o Alternado"

    # Quebra de padr√£o (2 iguais + invers√£o)
    if count == 2 and penultimo == ultimo and len(historico) >= 3 and historico[-3] != ultimo:
        return "Quebra de Padr√£o"

    # Empates estrat√©gicos
    if 'E' in historico[-5:]:
        return "Empates Estrat√©gicos"

    # Sequ√™ncias longas (>5)
    if count >= 5:
        return "Sequ√™ncias Longas de Uma Cor"

    # Padr√£o de dois ou tr√™s repetidos + invers√£o
    if len(historico) >= 4:
        last_four = historico[-4:]
        if last_four[0] == last_four[1] and last_four[2] != last_four[1] and last_four[3] == last_four[2]:
            return "Padr√£o de Dois ou Tr√™s Repetidos + Invers√£o"

    # Padr√µes de ciclos curtos
    if len(historico) >= 6:
        ciclo_1 = historico[-3:]
        ciclo_2 = historico[-6:-3]
        if ciclo_1 == ciclo_2:
            return "Padr√µes de Ciclos Curtos"

    # Falsos padr√µes (muita altern√¢ncia, pouca repeti√ß√£o)
    if len(historico) >= 6:
        repeticoes = sum(1 for i in range(len(historico)-1) if historico[i] == historico[i+1])
        if repeticoes <= 1:
            return "Falsos Padr√µes"

    # Manipula√ß√£o por n√≠vel de confian√ßa (empates e invers√µes)
    ultimos_6 = historico[-6:]
    empates = ultimos_6.count('E')
    inversoes = sum(1 for i in range(len(ultimos_6)-1) if ultimos_6[i] != ultimos_6[i+1] and ultimos_6[i] != 'E' and ultimos_6[i+1] != 'E')
    if empates >= 1 and inversoes >= 2:
        return "Manipula√ß√£o por N√≠vel de Confian√ßa"

    return "Ru√≠do Controlado / Qu√¢ntico"

# Fun√ß√£o para sugerir aposta
def sugerir_aposta(padrao, historico):
    ultimo = historico[-1] if historico else None

    if padrao == "Sequ√™ncia Repetitiva":
        return f"Aposte em {EMOJI_MAP[oposto(ultimo)]}", "Aposte no contr√°rio da sequ√™ncia, esperando a quebra do padr√£o."
    elif padrao == "Padr√£o Alternado":
        return f"Aposte em {EMOJI_MAP[ultimo]}", "Aposte na continua√ß√£o da altern√¢ncia do padr√£o atual."
    elif padrao == "Quebra de Padr√£o":
        return f"Aposte em {EMOJI_MAP[oposto(ultimo)]}", "Ap√≥s uma quebra, aposte no oposto do √∫ltimo resultado."
    elif padrao == "Empates Estrat√©gicos":
        for i in reversed(historico[:-1]):
            if i != 'E':
                return f"Aposte em {EMOJI_MAP[i]}", "Empate detectado. Aposte na repeti√ß√£o do √∫ltimo lado vencedor."
        return "Aguardar", "Empate detectado, mas sem hist√≥rico claro para apostar."
    elif padrao == "Sequ√™ncias Longas de Uma Cor":
        return f"Aposte em {EMOJI_MAP[ultimo]}", "Sequ√™ncia longa detectada. Aposte na continua√ß√£o ou aguarde a quebra."
    elif padrao == "Padr√£o de Dois ou Tr√™s Repetidos + Invers√£o":
        ciclo = historico[-4:-1]
        if ciclo[0] == ciclo[1] and ciclo[2] != ciclo[1]:
            return f"Aposte em {EMOJI_MAP[ciclo[2]]}", "Aposte na repeti√ß√£o da invers√£o do ciclo detectado."
        return "Aguardar", "Ciclo n√£o claro para apostar."
    elif padrao == "Padr√µes de Ciclos Curtos":
        ciclo = historico[-4:]
        return f"Aposte em {EMOJI_MAP[ciclo[0]]}", "Ciclo curto detectado. Aposte na continuidade do ciclo."
    elif padrao == "Falsos Padr√µes":
        return "Evitar aposta", "Falso padr√£o detectado. Evite apostar para n√£o ser enganado."
    elif padrao == "Manipula√ß√£o por N√≠vel de Confian√ßa":
        return "Aposte com cautela e valor baixo", "Manipula√ß√£o sofisticada detectada. Aposte com prud√™ncia."
    else:
        return "Sem sugest√£o clara", "Padr√£o n√£o identificado claramente para sugerir aposta."

# Inicializa√ß√£o do estado da sess√£o
if 'historico' not in st.session_state:
    st.session_state.historico = collections.deque(maxlen=90)  # Pode ajustar o tamanho conforme necessidade

# --- Layout ---
st.title("üîÆ Analisador Avan√ßado de Padr√µes Football Studio")
st.markdown("---")

st.markdown("### 1. Inserir Resultados")
st.write("Clique para inserir o resultado da rodada:")

col1, col2, col3, col4, col5 = st.columns(5)
with col1:
    if st.button("üî¥ Vit√≥ria da Casa", use_container_width=True):
        st.session_state.historico.append('V')
with col2:
    if st.button("üîµ Vit√≥ria do Visitante", use_container_width=True):
        st.session_state.historico.append('A')
with col3:
    if st.button("üü° Empate", use_container_width=True):
        st.session_state.historico.append('E')
with col4:
    st.markdown("<br>", unsafe_allow_html=True)
    if st.button("Desfazer", help="Remove o √∫ltimo resultado", use_container_width=True):
        if st.session_state.historico:
            st.session_state.historico.pop()
with col5:
    st.markdown("<br>", unsafe_allow_html=True)
    if st.button("Limpar Hist√≥rico", help="Apaga todo o hist√≥rico", use_container_width=True):
        st.session_state.historico.clear()

st.markdown("---")

st.markdown("### 2. Hist√≥rico de Resultados")
hist_emojis = [EMOJI_MAP[r] for r in reversed(st.session_state.historico)]
linhas = [hist_emojis[i:i+9] for i in range(0, len(hist_emojis), 9)]
for linha in linhas[:10]:
    st.markdown(" ".join(linha))

st.markdown("---")

# An√°lise e sugest√£o
if st.session_state.historico:
    historico_list = list(st.session_state.historico)
    padrao = detectar_padrao(historico_list)
    info = PADROES_INFO.get(padrao, {"numero": "?", "emoji": "‚ùî", "descricao": "Padr√£o n√£o identificado."})
    aposta, explicacao = sugerir_aposta(padrao, historico_list)
    st.markdown(f"**Padr√£o Detectado: {info['numero']}. {padrao} {info['emoji']}**")
    st.success(f"**Sugest√£o de Aposta:** {aposta}")
    st.info(f"**Explica√ß√£o:** {explicacao}")
else:
    st.info("Insira resultados para come√ßar a an√°lise.")

# Rodap√©
st.markdown("---")
st.write("Desenvolvido para an√°lise de padr√µes no Football Studio. Jogue com responsabilidade.")
